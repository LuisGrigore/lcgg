# Configuración de directorios
SRC_DIR ?= src          # Directorio de origen con archivos .c y .h
OBJ_DIR ?= obj          # Directorio de destino para archivos .o
EXTERNALS_DIR ?= externals   # Directorio que contiene archivos de encabezado externos

# Buscar todos los archivos .c en el directorio de origen y subdirectorios
SRCS = $(shell find $(SRC_DIR) -name "*.c")

# Generar la lista de archivos .o correspondientes
OBJS = $(patsubst $(SRC_DIR)/%.c,$(OBJ_DIR)/%.o,$(SRCS))

# Buscar todos los subdirectorios de SRC_DIR y almacenarlos en la variable INC_DIRS
INC_DIRS = $(shell find $(SRC_DIR) $(EXTERNALS_DIR) -type d)

# Regla principal: compilar todos los archivos .o
all: $(OBJS)

# Regla para compilar archivos .c a .o
$(OBJ_DIR)/%.o: $(SRC_DIR)/%.c
	@mkdir -p $(dir $@)      # Crear el directorio de destino si no existe
	gcc -c $< -o $@ $(addprefix -I,$(INC_DIRS))  # Compilar el archivo .c en .o

# Generar dependencias automáticamente
# Esta regla asegura que si se modifica un archivo .h, se recompilen los .o correspondientes
-include $(OBJS:.o=.d)

$(OBJ_DIR)/%.o: $(SRC_DIR)/%.c
	@mkdir -p $(dir $@)      # Crear el directorio de destino si no existe
	gcc -MMD -c $< -o $@ $(addprefix -I,$(INC_DIRS))  # Compilar el archivo .c en .o y generar un archivo .d

# Regla para limpiar los archivos .o y .d generados
clean:
	rm -rf $(OBJ_DIR)/*.o $(OBJ_DIR)/**/*.o $(OBJ_DIR)/*.d $(OBJ_DIR)/**/*.d

.PHONY: all clean
